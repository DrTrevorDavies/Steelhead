hist(sd_diff_vec)
chill_pred_abundance<-albion_catch*samples#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
run_samples<-c(45,46,47,48,49,50,51,52,53,54,55)#
#
daily_chill_samples[run_samples]<-chill_pred_abundance[run_samples]
daily_chill_samples
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
#
deviates<-p-pth#
#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
#this is probably an artifact of fixing the IFC runttimgin with the decay curve - i don't knwo the BEST way to correct for this - though i have several ideas#
#
plot(xs,p,type="b", col="blue",main=i,xlab="Julian Date", ylab="Corrected Albion Catch")#
lines(xs,pth, col="dark red",lwd=2)
m
chill_mean-m
chill_pred_abundance<-albion_catch*samples#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
run_samples<-c(35,46,47,48,49,50,51,52,53,54,65)#
#
daily_chill_samples[run_samples]<-chill_pred_abundance[run_samples]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
#
deviates<-p-pth#
#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
#this is probably an artifact of fixing the IFC runttimgin with the decay curve - i don't knwo the BEST way to correct for this - though i have several ideas#
#
plot(xs,p,type="b", col="blue",main=i,xlab="Julian Date", ylab="Corrected Albion Catch")#
lines(xs,pth, col="dark red",lwd=2)
chill_mean-m
chill_sd-s
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack")#
lines(xs,pth, col="dark red",lwd=2)
chill_pred_abundance<-albion_catch*samples#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
run_samples<-c(35,37,40,45,47,50,53,55,58,60,65)#
#
daily_chill_samples[run_samples]<-chill_pred_abundance[run_samples]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
#
deviates<-p-pth#
#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
#this is probably an artifact of fixing the IFC runttimgin with the decay curve - i don't knwo the BEST way to correct for this - though i have several ideas#
#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack")#
lines(xs,pth, col="dark red",lwd=2)
chill_mean-m
chill_sd-s
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p)*1.2))#
lines(xs,pth, col="dark red",lwd=2)
p
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p)*1.2),na.rm=T)
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p)*1.2),na.omit=T)
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p)),na.omit=T)
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)))
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,1.2*max(p,na.rm=T)))
350/25
mean_diff_mat<-(NA,n_sims,7)#
sd_diff_mat<-(NA,n_sims,7)
mean_diff_mat<-matrix(NA,n_sims,7)#
sd_diff_mat<-matrix(NA,n_sims,7)
mean_diff_mat
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)
mean_diff_mat
mean_diff_mat[i,1]<-chill_mean-m
mean_diff_mat
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s
mean_diff_mat
sd_diff_mat
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
#
mean_diff_vec8p<-rep(NA,length=n_sims)#
sd_diff_vec8p<-rep(NA,length=n_sims)#
mean_diff_vec8s<-rep(NA,length=n_sims)#
sd_diff_vec8s<-rep(NA,length=n_sims)#
#
mean_diff_vec10p<-rep(NA,length=n_sims)#
sd_diff_vec10p<-rep(NA,length=n_sims)#
mean_diff_vec10s<-rep(NA,length=n_sims)#
sd_diff_vec10s<-rep(NA,length=n_sims)#
#
mean_diff_vec12p<-rep(NA,length=n_sims)#
sd_diff_vec12p<-rep(NA,length=n_sims)#
mean_diff_vec12s<-rep(NA,length=n_sims)#
sd_diff_vec12s<-rep(NA,length=n_sims)#
#
mean_diff_vec14p<-rep(NA,length=n_sims)#
sd_diff_vec14p<-rep(NA,length=n_sims)#
mean_diff_vec14s<-rep(NA,length=n_sims)#
sd_diff_vec14s<-rep(NA,length=n_sims)#
#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-rnorm(1,1.7e6,200000)#
agg_daily<-rep(NA,length=100)#
#
chill_mean<-rnorm(1,50,4)#
chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
q_albion<-0.0007074613#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,q_albion*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),chill_daily[d]/agg_daily[d])#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}
warnings()
mean_diff_mat
par(mfcol=c(2,7))
for(i in 1:14){hist(mean_diff_mat[,i],main=i)}
mean_diff_mat[,1]
par(mfcol=c(1,1))
for(i in 1:14){hist(mean_diff_mat[,i],main=i)}
colMeans(mean_diff_mat)
library(matrixStats)
colSds(mean_diff_mat)
#ChumSystemwideEstimate.R#
#
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-rnorm(1,50,4)#
agg_sd<-11#
agg_abundance<-rnorm(1,1.7e6,200000)#
agg_daily<-rep(NA,length=100)#
#
chill_mean<-rnorm(1,50,10)#
chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
q_albion<-0.0007074613#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,q_albion*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),chill_daily[d]/agg_daily[d])#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
mean_diff_mat
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))
p
chill_mean
chill_sd
agg_mean
agg_sd
chill_pred_abundance
albion_catch
agg_daily
?rlnorm
expand_albion<-rlnorm(1,log(133),log(65))
expand_albion
exp(expand_albion
)
rlnorm(1000,log(133),log(65))
plot(rlnorm(1000,log(133),log(65)))
par(mfcol=c(1,1))
plot(rlnorm(1000,log(133),log(65)))
plot(rlnorm(1000,log(133),log(10)))
plot(rlnorm(1000,log(120),log(1)))
plot(rlnorm(1000,log(120),log(5)))
hist(rlnorm(1000,log(120),log(5)))
hist(rlnorm(1000,log(120),log(1)))
hist(rlnorm(1000,log(120),log(1.5)))
n_sims<-10#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-rnorm(1,50,4)#
agg_sd<-11#
agg_abundance<-rnorm(1,1.7e6,200000)#
agg_daily<-rep(NA,length=100)#
#
chill_mean<-rnorm(1,50,10)#
chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),chill_daily[d]/agg_daily[d])#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}
mean_diff_mat
#ChumSystemwideEstimate.R#
#
n_sims<-10#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-rnorm(1,50,10)#
chill_sd_vec[i]<-chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),chill_daily[d]/agg_daily[d])#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
i
p
daily_chill_samples
albion_catch
samples
#ChumSystemwideEstimate.R#
#
n_sims<-10#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-rnorm(1,50,10)#
chill_sd_vec[i]<-chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(0,chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
i
samples
chill_daily
agg_daily
chill_mean
chill_sd
#ChumSystemwideEstimate.R#
#
n_sims<-10#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-rnorm(1,50,5)#
chill_sd_vec[i]<-chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(0,chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
warnings()
mean_diff_mat
#ChumSystemwideEstimate.R#
#
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-rnorm(1,50,5)#
chill_sd_vec[i]<-chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(0,chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
mean_diff_mat
i
chill_mean_vec
chill_sd_vec
albion_catch
samples
daily_chill_samples
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]
daily_chill_samples
chill_mean
chill_mean_vec
plot(chill_mean_vec)
par(mfcl=c(1,1))
par(mfcol=c(1,1))
plot(chill_mean_vec)
#ChumSystemwideEstimate.R#
#
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-max(40,min(60,rnorm(1,50,5)))#
chill_sd_vec[i]<-chill_sd<-max(3,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
i
chill_mean
chill_sd
#ChumSystemwideEstimate.R#
#
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-max(40,min(60,rnorm(1,50,5)))#
chill_sd_vec[i]<-chill_sd<-max(6,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
chill_mean_mat
mean_diff_mat
par(mfcol=c(1,2))
for(i in 1:14){hist(mean_diff_mat[,i])}
for(i in 1:14){hist(mean_diff_mat[,i], main=i)}
colMeans(mean_diff_mat)
colSsd(mean_diff_mat)
colSds(mean_diff_mat)
odds<-c(2.788057,2.565233,2.282448,2.270793,1.930824,4.167025,4.070039)
colSds(mean_diff_mat)
c(4.530037,4.448897,4.355734,4.246672,4.613921 4.167025 1.860496 4.070039 1.725853
#ChumSystemwideEstimate.R#
#
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-max(40,min(60,rnorm(1,50,5)))#
chill_sd_vec[i]<-chill_sd<-max(6,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance
ls()
mean_diff_mat
for(i in 1:14){hist(mean_diff_mat[,i])}
par(mfcol=c(1,2))#
for(i in 1:14){hist(mean_diff_mat[,i])}
colMeans
colMeans(mean_diff_mat)
colSds(mean_diff_mat)
#ChumSystemwideEstimate.R#
#
n_sims<-1000#
#
mean_diff_mat<-matrix(NA,n_sims,14)#
sd_diff_mat<-matrix(NA,n_sims,14)#
chill_mean_vec<-rep(NA,n_sims)#
chill_sd_vec<-rep(NA,n_sims)#
chill_abundance_vec<-rep(NA,n_sims)#
par(mfcol=c(4,4))#
#simulate differnet populations#
for(i in 1:n_sims)#
{#
set.seed(i)#
#day 1<-Sept1#
agg_mean<-50#
agg_sd<-11#
agg_abundance<-1.7e6#
agg_daily<-rep(NA,length=100)#
#
chill_mean_vec[i]<-chill_mean<-max(40,min(60,rnorm(1,50,5)))#
chill_sd_vec[i]<-chill_sd<-max(6,rnorm(1,11,3))#
chill_abundance_vec[i]<-chill_abundance<-rnorm(1,147000,25000)#
chill_daily<-rep(NA,length=100)#
#
samples<-rep(NA,length=100)#
albion_catch<-rep(NA,length=100)#
#
expand_albion<-rlnorm(1,log(125),log(1.5))#
#
for(d in 1:100)#
{#
agg_daily[d]=agg_abundance*(1/(1+exp(-1.7*((d-agg_mean)/(agg_sd))))-1/(1+exp(-1.7*(((d-1)-agg_mean)/(agg_sd)))))#
chill_daily[d]=chill_abundance*(1/(1+exp(-1.7*((d-chill_mean)/(chill_sd))))-1/(1+exp(-1.7*(((d-1)-chill_mean)/(chill_sd)))))#
#sample populations#
albion_catch[d]<-rpois(1,(1/expand_albion)*(agg_daily[d]+chill_daily[d]))#
samples[d]<-rbinom(1,min(25,albion_catch[d]),max(chill_daily[d]/agg_daily[d]))#
}#
#
chill_pred_abundance<-albion_catch*samples#
run_samples_8peak<-c(47,48,49,50,51,52,53,54)#
run_samples_8spread<-c(35,40,41,49,50,55,56,66)#
run_samples_9peak<-c(47,48,49,50,51,52,53,54,55)#
run_samples_9spread<-c(35,40,41,49,50,55,56,60,65)#
run_samples_10peak<-c(46,47,48,49,50,51,52,53,54,55)#
run_samples_10spread<-c(35,36,40,41,49,50,55,56,65,66)#
run_samples_11peak<-c(46,47,48,49,50,51,52,53,54,55,56)#
run_samples_11spread<-c(30,35,36,40,41,49,50,55,56,60,65)#
run_samples_12peak<-c(45,46,47,48,49,50,51,52,53,54,55,56)#
run_samples_12spread<-c(30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_13peak<-c(45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_13spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70)#
run_samples_14peak<-c(44,45,46,47,48,49,50,51,52,53,54,55,56,57)#
run_samples_14spread<-c(29,30,35,36,40,41,49,50,55,56,65,66,70,71)#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8peak]<-chill_pred_abundance[run_samples_8peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,1]<-chill_mean-m#
sd_diff_mat[i,1]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_8spread]<-chill_pred_abundance[run_samples_8spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,2]<-chill_mean-m#
sd_diff_mat[i,2]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9peak]<-chill_pred_abundance[run_samples_9peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,3]<-chill_mean-m#
sd_diff_mat[i,3]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_9spread]<-chill_pred_abundance[run_samples_9spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,4]<-chill_mean-m#
sd_diff_mat[i,4]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10peak]<-chill_pred_abundance[run_samples_10peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,5]<-chill_mean-m#
sd_diff_mat[i,5]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_10spread]<-chill_pred_abundance[run_samples_10spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,6]<-chill_mean-m#
sd_diff_mat[i,6]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11peak]<-chill_pred_abundance[run_samples_11peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,7]<-chill_mean-m#
sd_diff_mat[i,7]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_11spread]<-chill_pred_abundance[run_samples_11spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,8]<-chill_mean-m#
sd_diff_mat[i,8]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12peak]<-chill_pred_abundance[run_samples_12peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,9]<-chill_mean-m#
sd_diff_mat[i,9]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_12spread]<-chill_pred_abundance[run_samples_12spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,10]<-chill_mean-m#
sd_diff_mat[i,10]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13peak]<-chill_pred_abundance[run_samples_13peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,11]<-chill_mean-m#
sd_diff_mat[i,11]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_13spread]<-chill_pred_abundance[run_samples_13spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,12]<-chill_mean-m#
sd_diff_mat[i,12]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14peak]<-chill_pred_abundance[run_samples_14peak]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2),na.rm=T)#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,13]<-chill_mean-m#
sd_diff_mat[i,13]<-chill_sd-s#
#
daily_chill_samples<-rep(NA,length=length(chill_pred_abundance))#
daily_chill_samples[run_samples_14spread]<-chill_pred_abundance[run_samples_14spread]#
#estimate #
#1)Chilliwack 50% mean and spread#
#2)aggregate abundance#
#normalize y to be a probability (sum = 1)#
p = daily_chill_samples/sum(daily_chill_samples,na.rm=T)#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
#compute weighted mean and standard deviation#
m=sum(xs*p,na.rm=T)#
s=sqrt(sum((xs - m)^ 2*p,na.rm=T))#
#compute theoretical probabilities#
xs = seq(1,length(daily_chill_samples))#
pth = dnorm(xs,m,s)#
deviates<-p-pth#
#plot fitted normal distribution to observations#
#its important to check these - because of the nature of the truncated data set there appears to be a bias towards a later run timing prediction.#
plot(xs,p,type="p", col="blue",main=i,xlab="Julian Date", ylab="Normalized Albion Catch of Chilliwack",ylim=c(0,max(p,na.rm=T)*1.2))#
lines(xs,pth, col="dark red",lwd=2)#
mean_diff_vec[i]<-chill_mean-m#
sd_diff_vec[i]<-chill_sd-s#
mean_diff_mat[i,14]<-chill_mean-m#
sd_diff_mat[i,14]<-chill_sd-s#
}#
#evaluate performance#
#
par(mfcol=c(1,2))#
for(i in 1:14){hist(mean_diff_mat[,i])}
colSums(mean_diff_mat)
colSds(mean_diff_mat)
plot(hist(mean_diff_mat))
plot(hist(mean_diff_mat[,1]))
plot(hist(mean_diff_mat[,2]))
mean_diff_mat
colSds(mean_diff_mat)
colMeans(mean_diff_mat)
colMeans(sd_diff_mat)
colSds(sd_diff_mat)
n_fish<-1000#
fish<-seq(1,n_fish,by=1)
fish
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics#
exposure<-rep(0,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics#
rt_mean<-50#
rt_sd<-15#
#
speed_mean<-20#
speed_sd<-10#
#
for(fish in 1:n_fish)#
{#
#
speeds[fish]<-rnorm(1,speed_mean,speed_sd)#
starting_date[fish]<-rnorm(1,rt_mean,rt_sd)#
#
}
starting_date
hist(starting_date)
hist(speed)
hist(speeds)
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics#
exposure<-rep(0,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics#
rt_mean<-50#
rt_sd<-15#
#
speed_mean<-20#
speed_sd<-3#
#
for(fish in 1:n_fish)#
{#
#
speeds[fish]<-rnorm(1,speed_mean,speed_sd)#
starting_date[fish]<-rnorm(1,rt_mean,rt_sd)#
#
}
hist(speeds)
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics#
exposure<-rep(0,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics#
rt_mean<-50#
rt_sd<-15#
#
speed_mean<-20#
speed_sd<-3#
#
for(fish in 1:n_fish)#
{#
#
speeds[fish]<-max(9,min(55,rnorm(1,speed_mean,speed_sd)))#
starting_date[fish]<-max(25,min(75,rnorm(1,speed_mean,speed_sd)))#
#
}
hist(speeds)
hist(speeds, breaks=100)
hist(starting_date, breaks=100)
hist(starting_date)
for(fish in 1:n_fish)#
{#
#
speeds[fish]<-max(9,min(55,rnorm(1,speed_mean,speed_sd)))#
starting_date[fish]<-max(25,min(75,rnorm(1,rt_mean,rt_sd)))#
#
}
starting_date
hist(starting_date)
steelhead.r#
#
#exposure model for steelhead#
#
#read in data#
#
#fishery_mat<-read.csv("")#
n_km<-100#
n_hours<-300#
#
fishery_mat<-matrix(0,n_km,n_hours)#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics#
exposure<-rep(0,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics#
rt_mean<-50#
rt_sd<-10#
#
speed_mean<-20#
speed_sd<-3#
#
for(fish in 1:n_fish)#
{#
#
speeds[fish]<-max(9,min(55,rnorm(1,speed_mean,speed_sd)))#
starting_date[fish]<-max(15,min(85,rnorm(1,rt_mean,rt_sd)))#
#
}#
#move fish though fisheries #
#
for(fish in 1:n_fish)#
{#
for(day in arrival:departure){#
}#
}
hist(starting_date)
hist(speeds, breaks=100)
hist(starting_date, breaks=100)
for(fish)#
{#
#
speeds[fish]<-max(9,min(55,rnorm(1,speed_mean,speed_sd)))#
starting_date[fish]<-max(15,min(85,rnorm(1,rt_mean,rt_sd)))#
#
}
fish
n_fish<-1000#
fish<-seq(1,n_fish,by=1)
speeds[fish]<-max(9,min(55,rnorm(1,speed_mean,speed_sd)))#
starting_date[fish]<-max(15,min(85,rnorm(1,rt_mean,rt_sd)))
hist(speeds)
speeds<-max(9,min(55,rnorm(fish,speed_mean,speed_sd)))#
starting_date<-max(15,min(85,rnorm(fish,rt_mean,rt_sd)))
speeds
fish
speeds<-pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd)))#
starting_date<-pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))
speeds
hist(speeds)
ind<-1
n_km/speeds[ind]
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd))))/24
hist(speeds)
hist(starting_date)
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd))))*24
hist(starting_date)
n_km/speeds[ind]
speeds<-round((pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24)	#speed in km/h
speeds
round(n_km/speeds[ind])
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd))))*24 #starting date in hours
round(n_km/speeds[ind])
starting_date[ind]
for(loc in n_km:1)){#
#
print(loc)#
#
}
for(loc in n_km:1){#
#
print(loc)#
#
}
for(loc in 1:n_km){#
#
print(loc)#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+speeds[ind]#
#
print(time_at_loc)#
#check exposure against fishery matrix#
}
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24
for(loc in 1:n_km){#
#
print(loc)#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+speeds[ind]#
#
print(time_at_loc)#
#check exposure against fishery matrix#
}
for(loc in 1:n_km){#
#
print(loc)#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
print(time_at_loc)#
#check exposure against fishery matrix#
}
time_at_loc
fishery_mat[loc,round(time_at_loc)]
n_km<-1000#
n_hours<-5000#
#
fishery_mat<-matrix(0,n_km,n_hours)#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(0,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-50#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries
fishery_mat[loc,round(time_at_loc)]
exposure<-rep(NA,n_fish)
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
print(time_at_loc)#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}
exposure[ind]
exposure[ind]+fishery_mat[loc,round(time_at_loc)]
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
print(time_at_loc)#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}
exposure
fishery_mat<-matrix(0,n_km,n_hours)#
fishery_mat[200:300,800:1200]<-1
fishery_mat
fishery_mat[250,]
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
print(time_at_loc)#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}
getwd()
setwd("~/github/Steelhead/Data")
getwd()
getwd()
setwd("~/github/Steelhead/Data")
getwd()
setwd("~/github/Steelhead/Data")#
#
#fishery_mat<-read.csv("2010Area E_openings.csv")#
#fishery_mat<-read.csv("2011Area E_openings.csv")#
#fishery_mat<-read.csv("2012Area E_openings.csv")#
#fishery_mat<-read.csv("2013Area E_openings.csv")#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
#fishery_mat<-read.csv("2015Area E_openings.csv")#
#fishery_mat<-read.csv("2016Area E_openings.csv")
fishery_mat
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("~/github/Steelhead/Data")#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
boxplot(list(exposure_2010, exposure_2011, exposure_2012, exposure_2013, exposure_2014, exposure_2015, exposure_2016), names=c("2010","2011","2012","2013","2014","2015","2016"))
boxplot(exposure_2014)
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("~/github/Steelhead/Data")#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
boxplot(exposure)
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("~/github/Steelhead/Data")#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
boxplot(t(exposure))
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("~/github/Steelhead/Data")#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
plot(exposure)
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("~/github/Steelhead/Data")#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
matplot(exposure, pch=19)
contour(exposure)
getwd()
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
source(directories.R)#
setwd(data_dir)#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM like model#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
setwd(plots_dir)#
boxplot(exposure)
ls()
getwd()
source(directories.R)
source("directories.R")
source(directories.R, local=T)
getwd()
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("/Users/mikehawkshaw/github/Steelhead/Model")#
source(directories.R)#
setwd(data_dir)#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM like model#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
setwd(plots_dir)#
boxplot(exposure)
rm(list=ls())
#steelhead.r#
#exposure model for steelhead#
#
#read in data#
setwd("/Users/mikehawkshaw/github/Steelhead/Model")#
source(directories.R)#
setwd(data_dir)#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM like model#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
setwd(plots_dir)#
boxplot(exposure)
rm(list=ls())
gc()
getwd()
source(directories.R)
setwd("/Users/mikehawkshaw/github/Steelhead/Model")#
source(directories.R)
setwd("/Users/mikehawkshaw/github/Steelhead/Model")#
source("directories.R")
ls()
data_dir
setwd("/Users/mikehawkshaw/github/Steelhead/Model")#
source("directories.R")#
setwd(data_dir)#
#
fishery_mat<-as.matrix(read.csv("2014Area E_openings.csv"))#
fishery_mat<-as.matrix(read.csv("2014Area B_openings.csv"))#
#
colnames(fishery_mat)<-NULL#
fishery_mat<-fishery_mat[,2:3337]#
#
steelhead_data<-as.data.frame(read.csv("steelhead_pops.csv", header=T))#
#
n_km<-521#
n_hours<-3336#
#
#set up a fake steelhead population#
#IBM like model#
#
n_fish<-1000#
fish<-seq(1,n_fish,by=1)#
#
#each fish has characteristics and they are in these vectors#
exposure<-rep(NA,n_fish)#
speeds<-rep(0,n_fish)#
starting_date<-rep(0,n_fish)#
#
#population characteristics (these are the hypothesis about the population that will be tested)#
rt_mean<-100#
rt_sd<-10#
speed_mean<-20#
speed_sd<-3#
#
speeds<-(pmax(9,pmin(55,rnorm(fish,speed_mean,speed_sd))))/24	#speed in km/h#
starting_date<-(pmax(15,pmin(85,rnorm(fish,rt_mean,rt_sd)))) #starting date in hours#
starting_hour<-starting_date*24#
#move fish though fisheries #
#
for(ind in 1:n_fish)#
{#
#
exposure[ind]<-0#
for(loc in 1:n_km){#
#
start_time<-starting_hour[ind]#
time_at_loc<-start_time+loc*speeds[ind]#
#
#check exposure against fishery matrix#
#
exposure[ind]<-exposure[ind]+fishery_mat[loc,round(time_at_loc)]#
#
}#
}#
setwd(plots_dir)#
boxplot(exposure)
boxplot(exposure, outlines=F)
boxplot(exposure, outline=F)
plor(density(exposure))
plot(density(exposure))
plot(density(exposure))setwd(plots_dir)#
pdf()#
plot(density(exposure))#
dev.off()
as.text(2014Area)
as.char(2014Area)
as.string(2014Area)
string(2014Area)
library("xtable")
